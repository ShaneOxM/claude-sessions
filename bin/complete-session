#!/bin/bash
# Complete session(s) - marks sessions as completed
# Supports comma-separated session numbers

SESSIONS_DIR="$HOME/.claude/sessions"
CURRENT_SESSIONS_FILE="$SESSIONS_DIR/.current-sessions"
AGENT_ID="${CLAUDE_AGENT_ID:-claude-code-main}"
CURRENT_PROJECT=$(pwd)
CURRENT_BRANCH=$(git branch --show-current 2>/dev/null || echo "main")
CHOICES="$1"  # Get first argument (can be comma-separated)

# Source session manager functions
source ~/.claude/hooks/session-manager.sh 2>/dev/null || {
    echo "Error: Session manager not found"
    exit 1
}

# Build list of active sessions
SESSION_COUNT=0
declare -a SESSION_LIST

# Parse active sessions from .current-sessions file
while IFS='|' read -r session project branch; do
    if [[ -n "$session" ]] && [[ -f "$SESSIONS_DIR/$session" ]]; then
        SESSION_COUNT=$((SESSION_COUNT + 1))
        SESSION_LIST[$SESSION_COUNT]="$session|$project|$branch"
    fi
done < <(awk '
    BEGIN { RS=""; FS="\n" }
    /^### Agent: '"$AGENT_ID"'/ {
        session=""; project=""; branch=""; status=""
        for (i=1; i<=NF; i++) {
            if ($i ~ /^- Session:/) {
                session = $i
                gsub(/^- Session: /, "", session)
            }
            else if ($i ~ /^- Project:/) {
                project = $i
                gsub(/^- Project: /, "", project)
            }
            else if ($i ~ /^- Branch:/) {
                branch = $i
                gsub(/^- Branch: /, "", branch)
            }
            else if ($i ~ /^- Status:/) {
                status = $i
                gsub(/^- Status: /, "", status)
            }
        }
        # Only include active sessions
        if (status == "active" && session != "") {
            print session "|" project "|" branch
        }
    }' "$CURRENT_SESSIONS_FILE" | sort -t'|' -k1 -r | uniq)

# If no argument provided, list sessions
if [[ -z "$CHOICES" ]]; then
    if [ $SESSION_COUNT -eq 0 ]; then
        echo "No active sessions to complete."
        exit 0
    fi
    
    echo "üìÇ Active Sessions (can be completed):"
    echo "======================================"
    echo
    
    for i in $(seq 1 $SESSION_COUNT); do
        IFS='|' read -r session project branch <<< "${SESSION_LIST[$i]}"
        desc=$(echo "$session" | sed -E 's/^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{4}-//; s/\.md$//; s/-/ /g')
        
        if [[ "$project" == "$CURRENT_PROJECT" ]] && [[ "$branch" == "$CURRENT_BRANCH" ]]; then
            echo "  [$i] ‚≠ê $desc (CURRENT)"
        else
            echo "  [$i] $desc"
        fi
        echo "      üìÅ $(basename "$project") | üåø $branch"
        echo
    done
    
    echo "------------------------------"
    echo "Usage:"
    echo "  complete-session <numbers>  - Complete session(s)"
    echo "                                Numbers can be comma-separated"
    echo
    echo "Examples:"
    echo "  complete-session 1          - Complete session #1"
    echo "  complete-session 1,3,5      - Complete sessions #1, #3, and #5"
    exit 0
fi

# Process selections (comma-separated)
IFS=',' read -ra SELECTED <<< "$CHOICES"
COMPLETED_COUNT=0

echo "üìù Completing Sessions:"
echo "======================"
echo

for CHOICE in "${SELECTED[@]}"; do
    # Trim whitespace
    CHOICE=$(echo "$CHOICE" | xargs)
    
    if [[ "$CHOICE" =~ ^[0-9]+$ ]] && [[ "$CHOICE" -ge 1 ]] && [[ "$CHOICE" -le $SESSION_COUNT ]]; then
        # Valid number selection
        IFS='|' read -r session project branch <<< "${SESSION_LIST[$CHOICE]}"
        desc=$(echo "$session" | sed -E 's/^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{4}-//; s/\.md$//; s/-/ /g')
        
        echo "  Completing [$CHOICE]: $desc"
        echo "    üìÅ $(basename "$project") | üåø $branch"
        
        # Mark as completed in current sessions file
        update_current_session "$session" "completed" "Session completed at $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        
        # Add completion note to session file
        {
            echo ""
            echo "---"
            echo ""
            echo "## Session Completed"
            echo "**Completed at**: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
            echo "**Completed by**: $AGENT_ID"
        } >> "$SESSIONS_DIR/$session"
        
        COMPLETED_COUNT=$((COMPLETED_COUNT + 1))
        echo "    ‚úÖ Completed"
        echo
    else
        echo "  ‚ùå Invalid selection: $CHOICE (skipped)"
        echo
    fi
done

echo "------------------------------"
if [ $COMPLETED_COUNT -gt 0 ]; then
    echo "‚úÖ Completed $COMPLETED_COUNT session(s)"
    echo
    echo "üí° Completed sessions can be viewed but not continued."
    echo "   Use 'continue-session' to see only active sessions."
else
    echo "‚ö†Ô∏è  No sessions were completed"
fi