#!/bin/bash
# Continue session - can be run from bash or used by /continue command

SESSIONS_DIR="$HOME/.claude/sessions"
CURRENT_SESSIONS_FILE="$SESSIONS_DIR/.current-sessions"
AGENT_ID="claude-code-main"
CURRENT_PROJECT=$(pwd)
CURRENT_BRANCH=$(git branch --show-current 2>/dev/null || echo "main")
CHOICE="$1"  # Get first argument

# Build list of active sessions
SESSION_COUNT=0
declare -a SESSION_LIST

# Parse active sessions from .current-sessions file
while IFS='|' read -r session project branch; do
    if [[ -n "$session" ]] && [[ -f "$SESSIONS_DIR/$session" ]]; then
        SESSION_COUNT=$((SESSION_COUNT + 1))
        SESSION_LIST[$SESSION_COUNT]="$session|$project|$branch"
    fi
done < <(awk '
    BEGIN { RS=""; FS="\n" }
    /^### Agent: '"$AGENT_ID"'/ {
        session=""; project=""; branch=""; is_completed=0
        for (i=1; i<=NF; i++) {
            if ($i ~ /^- Session:/) {
                session = $i
                gsub(/^- Session: /, "", session)
            }
            else if ($i ~ /^- Project:/) {
                project = $i
                gsub(/^- Project: /, "", project)
            }
            else if ($i ~ /^- Branch:/) {
                branch = $i
                gsub(/^- Branch: /, "", branch)
            }
            else if ($i ~ /^- Completed:/) {
                is_completed = 1
            }
        }
        # Only include sessions that are NOT completed
        if (!is_completed && session != "") {
            print session "|" project "|" branch
        }
    }' "$CURRENT_SESSIONS_FILE" | sort -t'|' -k1 -r | uniq)

# If no argument provided, list sessions
if [[ -z "$CHOICE" ]]; then
    if [ $SESSION_COUNT -eq 0 ]; then
        echo "No active sessions found."
        echo
        echo "Starting a new session..."
        claude-sessions start "Development session for $(basename "$CURRENT_PROJECT")"
        exit 0
    fi
    
    echo "📂 Active Sessions:"
    echo "=================="
    echo
    
    for i in $(seq 1 $SESSION_COUNT); do
        IFS='|' read -r session project branch <<< "${SESSION_LIST[$i]}"
        desc=$(echo "$session" | sed -E 's/^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{4}-//; s/\.md$//; s/-/ /g')
        
        if [[ "$project" == "$CURRENT_PROJECT" ]] && [[ "$branch" == "$CURRENT_BRANCH" ]]; then
            echo "  [$i] ⭐ $desc (CURRENT)"
        else
            echo "  [$i] $desc"
        fi
        echo "      📁 $(basename "$project") | 🌿 $branch"
        echo
    done
    
    echo "------------------------------"
    echo "Usage:"
    echo "  continue-session <number>  - Continue session"
    echo "  continue-session new       - Start new session"
    echo
    echo "Example: continue-session 1"
    exit 0
fi

# Handle argument
if [[ "$CHOICE" == "new" ]] || [[ "$CHOICE" == "NEW" ]]; then
    # Start new session with remaining arguments as description
    shift
    DESCRIPTION="$*"
    if [[ -z "$DESCRIPTION" ]]; then
        DESCRIPTION="Development session for $(basename "$CURRENT_PROJECT")"
    fi
    claude-sessions start "$DESCRIPTION"
    NEW_SESSION=$(ls -t "$SESSIONS_DIR"/*.md 2>/dev/null | head -1)
    if [[ -f "$NEW_SESSION" ]]; then
        echo
        echo "📄 Session Content:"
        echo "=================="
        cat "$NEW_SESSION"
    fi
elif [[ "$CHOICE" =~ ^[0-9]+$ ]] && [[ "$CHOICE" -ge 1 ]] && [[ "$CHOICE" -le $SESSION_COUNT ]]; then
    # Valid number selection
    IFS='|' read -r session project branch <<< "${SESSION_LIST[$CHOICE]}"
    
    # Switch to selected session
    claude-sessions switch "$session"
    
    # Display session content
    echo
    echo "📄 Session Content:"
    echo "=================="
    cat "$SESSIONS_DIR/$session"
    echo
    echo "------------------------------"
    echo "✅ Session loaded!"
    echo "💡 Use 'claude-sessions update \"message\"' to add updates"
else
    echo "Invalid selection: $CHOICE"
    echo
    echo "Use 'continue-session' to see available sessions"
    echo "Use 'continue-session <number>' to select a session"
    echo "Use 'continue-session new [description]' to start a new session"
    exit 1
fi
