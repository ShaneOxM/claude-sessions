#!/bin/bash

# Enable Auto-Updates for Claude Session Manager
# This script enables background tasks and git hooks for automatic session updates

set -e

# Color codes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
RED='\033[0;31m'
NC='\033[0m' # No Color
BOLD='\033[1m'

echo -e "${CYAN}🚀 Claude Session Manager - Auto-Update Setup${NC}"
echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

# Function to add to shell config
add_to_shell_config() {
    local shell_config="$1"
    local backup_file="${shell_config}.backup.$(date +%Y%m%d-%H%M%S)"
    
    # Create backup
    if [[ -f "$shell_config" ]]; then
        cp "$shell_config" "$backup_file"
        echo -e "${GREEN}✓${NC} Backed up $shell_config to $backup_file"
    fi
    
    # Check if already added
    if grep -q "ENABLE_BACKGROUND_TASKS" "$shell_config" 2>/dev/null; then
        echo -e "${YELLOW}⚠${NC}  Background tasks already configured in $shell_config"
    else
        echo "" >> "$shell_config"
        echo "# Claude Session Manager - Background Tasks" >> "$shell_config"
        echo "export ENABLE_BACKGROUND_TASKS=1" >> "$shell_config"
        echo "export FORCE_AUTO_BACKGROUND_TASKS=1" >> "$shell_config"
        echo "" >> "$shell_config"
        echo -e "${GREEN}✓${NC} Added background task exports to $shell_config"
    fi
}

# 1. Add environment variables to shell config
echo -e "${BOLD}1. Setting up environment variables...${NC}"

# Detect shell and add to appropriate config
if [[ "$SHELL" == *"zsh"* ]]; then
    add_to_shell_config "$HOME/.zshrc"
elif [[ "$SHELL" == *"bash"* ]]; then
    add_to_shell_config "$HOME/.bashrc"
    # Also add to .bash_profile for macOS
    if [[ "$OSTYPE" == "darwin"* ]]; then
        add_to_shell_config "$HOME/.bash_profile"
    fi
else
    echo -e "${YELLOW}⚠${NC}  Unknown shell: $SHELL"
    echo "Please manually add these to your shell config:"
    echo "  export ENABLE_BACKGROUND_TASKS=1"
    echo "  export FORCE_AUTO_BACKGROUND_TASKS=1"
fi

# 2. Add to Claude settings
echo ""
echo -e "${BOLD}2. Updating Claude settings...${NC}"

CLAUDE_SETTINGS="$HOME/.claude/settings.local.json"
if [[ -f "$CLAUDE_SETTINGS" ]]; then
    # Check if env section exists
    if grep -q "ENABLE_BACKGROUND_TASKS" "$CLAUDE_SETTINGS" 2>/dev/null; then
        echo -e "${YELLOW}⚠${NC}  Background tasks already in Claude settings"
    else
        echo -e "${BLUE}ℹ${NC}  Add these to your $CLAUDE_SETTINGS env section:"
        echo '  "env": {'
        echo '    "ENABLE_BACKGROUND_TASKS": "1",'
        echo '    "FORCE_AUTO_BACKGROUND_TASKS": "1"'
        echo '  }'
    fi
else
    # Create new settings file
    cat > "$CLAUDE_SETTINGS" << 'EOF'
{
  "env": {
    "ENABLE_BACKGROUND_TASKS": "1",
    "FORCE_AUTO_BACKGROUND_TASKS": "1"
  }
}
EOF
    echo -e "${GREEN}✓${NC} Created $CLAUDE_SETTINGS with background task settings"
fi

# 3. Install git hooks
echo ""
echo -e "${BOLD}3. Installing git hooks for auto-updates...${NC}"

# Get the git directory for the current project
if git rev-parse --git-dir > /dev/null 2>&1; then
    GIT_DIR=$(git rev-parse --git-dir)
    HOOKS_DIR="$GIT_DIR/hooks"
    
    # Create post-commit hook
    cat > "$HOOKS_DIR/post-commit" << 'EOF'
#!/bin/bash
# Auto-update session after commit

# Only run if in Claude Code environment
if [[ -n "$CLAUDE_SESSION" ]] || [[ -f ".claude/sessions/.current-session" ]]; then
    # Get commit info
    COMMIT_MSG=$(git log -1 --pretty=%B)
    COMMIT_HASH=$(git rev-parse --short HEAD)
    FILES_CHANGED=$(git diff-tree --no-commit-id --name-only -r HEAD | wc -l | tr -d ' ')
    
    # Update session in background
    (
        sleep 1  # Small delay to ensure commit is complete
        claude-sessions update "Committed: $COMMIT_MSG ($COMMIT_HASH, $FILES_CHANGED files)" 2>/dev/null &
    ) &
fi
EOF
    chmod +x "$HOOKS_DIR/post-commit"
    echo -e "${GREEN}✓${NC} Installed post-commit hook"
    
    # Create pre-push hook that runs AFTER push completes
    cat > "$HOOKS_DIR/pre-push" << 'EOF'
#!/bin/bash
# Update session AFTER push completes (runs as pre-push but updates after)

# Get the remote and URL
REMOTE="$1"
URL="$2"

# Function to update session after push
update_after_push() {
    # Wait for push to complete
    sleep 2
    
    # Get the last commit details
    LAST_COMMIT=$(git log -1 --pretty=format:"%h %s")
    COMMIT_MSG=$(git log -1 --pretty=%B | head -1)
    COMMIT_HASH=$(git rev-parse --short HEAD)
    
    # Get detailed file changes
    FILES_CHANGED=$(git diff HEAD~1 --name-only | wc -l | tr -d ' ')
    FILE_LIST=$(git diff HEAD~1 --name-only | head -5 | xargs -I {} basename {} | tr '\n' ', ' | sed 's/, $//')
    
    # Get code statistics
    STATS=$(git diff HEAD~1 --stat | tail -1)
    INSERTIONS=$(echo "$STATS" | grep -o '[0-9]* insertion' | cut -d' ' -f1)
    DELETIONS=$(echo "$STATS" | grep -o '[0-9]* deletion' | cut -d' ' -f1)
    
    # Get specific code changes
    NEW_FUNCTIONS=$(git diff HEAD~1 | grep '^+.*\(function\|const\|let\|var\|class\|def\|feat\)' | wc -l | tr -d ' ')
    
    # Build comprehensive message
    MSG="Pushed to $REMOTE: $COMMIT_MSG [$COMMIT_HASH]"
    
    if [[ "$FILES_CHANGED" -gt 0 ]]; then
        MSG="$MSG | Files: $FILE_LIST"
        if [[ "$FILES_CHANGED" -gt 5 ]]; then
            MSG="$MSG (+$((FILES_CHANGED - 5)) more)"
        fi
    fi
    
    if [[ -n "$INSERTIONS" ]] || [[ -n "$DELETIONS" ]]; then
        MSG="$MSG | Changes: +${INSERTIONS:-0}/-${DELETIONS:-0} lines"
    fi
    
    if [[ "$NEW_FUNCTIONS" -gt 0 ]]; then
        MSG="$MSG | $NEW_FUNCTIONS new definitions"
    fi
    
    # Update the session
    claude-sessions update "$MSG" 2>/dev/null
}

# Run update in background AFTER push
update_after_push &

# Always allow the push to continue
exit 0
EOF
    chmod +x "$HOOKS_DIR/pre-push"
    echo -e "${GREEN}✓${NC} Installed pre-push hook (updates after push)"
else
    echo -e "${YELLOW}⚠${NC}  Not in a git repository. Git hooks not installed."
    echo "    Run this script in your project directory to install hooks."
fi

# 4. Export for current session
echo ""
echo -e "${BOLD}4. Enabling for current session...${NC}"
export ENABLE_BACKGROUND_TASKS=1
export FORCE_AUTO_BACKGROUND_TASKS=1
echo -e "${GREEN}✓${NC} Background tasks enabled for current session"

# 5. Verify setup
echo ""
echo -e "${BOLD}5. Verifying configuration...${NC}"

# Check if variables are set
if [[ "$ENABLE_BACKGROUND_TASKS" == "1" ]] && [[ "$FORCE_AUTO_BACKGROUND_TASKS" == "1" ]]; then
    echo -e "${GREEN}✓${NC} Environment variables active:"
    echo "    ENABLE_BACKGROUND_TASKS=1"
    echo "    FORCE_AUTO_BACKGROUND_TASKS=1"
else
    echo -e "${RED}✗${NC} Environment variables not active in current session"
fi

# Check which config files were updated
echo ""
echo -e "${GREEN}✓${NC} Configuration added to:"
if [[ -f "$HOME/.zshrc" ]] && grep -q "ENABLE_BACKGROUND_TASKS" "$HOME/.zshrc" 2>/dev/null; then
    echo "    ~/.zshrc"
fi
if [[ -f "$HOME/.bashrc" ]] && grep -q "ENABLE_BACKGROUND_TASKS" "$HOME/.bashrc" 2>/dev/null; then
    echo "    ~/.bashrc"
fi
if [[ -f "$HOME/.bash_profile" ]] && grep -q "ENABLE_BACKGROUND_TASKS" "$HOME/.bash_profile" 2>/dev/null; then
    echo "    ~/.bash_profile"
fi

# Check git hooks
if [[ -f ".git/hooks/post-commit" ]]; then
    echo -e "${GREEN}✓${NC} Git hooks installed in current repository"
fi

# Summary
echo ""
echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${GREEN}✅ Setup Complete!${NC}"
echo ""
echo -e "${BOLD}What's been configured:${NC}"
echo "  • Background tasks enabled in shell config"
echo "  • Git hooks installed for auto-updates"
echo "  • Session updates after commits and pushes"
echo ""
echo -e "${BOLD}To activate:${NC}"
echo "  1. Restart your terminal or run: source ~/.zshrc"
echo "  2. Use Ctrl+B in Claude Code for background tasks"
echo "  3. Commits and pushes will auto-update sessions"
echo ""
echo -e "${CYAN}Happy coding with automatic session tracking! 🚀${NC}"
