#!/bin/bash

# Claude Session Management CLI
source ~/.claude/hooks/session-manager.sh 2>/dev/null || {
    echo "Error: Session manager not found"
    exit 1
}

# Get project-local session
get_project_session() {
    local project_dir="${1:-$(pwd)}"
    local current_session_file="$project_dir/.claude/sessions/.current-session"
    
    # Check new location first
    if [[ -f "$current_session_file" ]]; then
        cat "$current_session_file"
    # Check old location for backwards compatibility
    elif [[ -f "$project_dir/.claude/.current-session" ]]; then
        cat "$project_dir/.claude/.current-session"
    else
        echo ""
    fi
}

# Get local sessions directory
get_local_sessions_dir() {
    echo "$(pwd)/.claude/sessions"
}

print_usage() {
    cat << EOF
Claude Sessions Management

Usage: claude-sessions <command> [options]

Commands:
  start <description>    Start a new session with description
  update <message>       Update current session with a message
  status                 Show current session status
  list                   List all active sessions
  complete               Mark current session as complete
  switch <session-file>  Switch to a different session
  
Options:
  --agent <id>          Set agent ID (default: claude-code-main)
  
Examples:
  claude-sessions start "implementing authentication"
  claude-sessions update "Added OAuth2 integration"
  claude-sessions status
  claude-sessions complete
EOF
}

# Parse arguments
COMMAND="$1"
shift

case "$COMMAND" in
    start)
        DESCRIPTION="$*"
        if [[ -z "$DESCRIPTION" ]]; then
            echo "Error: Please provide a session description"
            exit 1
        fi
        
        SESSION_FILE=$(generate_session_name "$DESCRIPTION")
        AGENT_ID=$(get_agent_id)
        PROJECT=$(get_project_path)
        BRANCH=$(get_git_branch)
        
        # Create session file
        update_session_file "$SESSION_FILE" "# Session: $DESCRIPTION
**Date**: $(date +%Y-%m-%d)
**Time**: $(date +%H:%M)
**Agent**: $AGENT_ID
**Project**: $PROJECT
**Branch**: $BRANCH

## Summary
$DESCRIPTION

## Tasks
- [ ] Initial task

## Current Work
Starting new session for: $DESCRIPTION"
        
        # Update current sessions (legacy)
        update_current_session "$SESSION_FILE" "active" "$DESCRIPTION"
        
        # Update global index
        update_global_index "$PROJECT" "$SESSION_FILE" "active"
        
        # Create project-local current session pointer
        local local_sessions_dir="$(get_local_sessions_dir)"
        mkdir -p "$local_sessions_dir"
        echo "$SESSION_FILE" > "$local_sessions_dir/.current-session"
        
        echo -e "\nüìÑ New Session Created"        
        echo "   Session: $SESSION_FILE"
        echo "   Project: $PROJECT"
        echo "   Branch:  $BRANCH"
        echo -e "\nüìù Initial Content:"
        head -n 5 "$SESSIONS_DIR/$SESSION_FILE" | sed 's/^/   /'
        echo "   Agent: $AGENT_ID"
        echo "   Project: $PROJECT"
        echo "   Branch: $BRANCH"
        ;;
        
    update)
        # Check if session name is provided as first argument
        if [[ "$1" =~ \.md$ ]]; then
            CURRENT_SESSION="$1"
            shift
            MESSAGE="$*"
        else
            MESSAGE="$*"
        fi
        
        if [[ -z "$MESSAGE" ]]; then
            echo "Error: Please provide an update message"
            echo "Usage: claude-sessions update [session-file] <message>"
            exit 1
        fi
        
        AGENT_ID=$(get_agent_id)
        PROJECT_PATH=$(pwd)
        CURRENT_BRANCH=$(get_git_branch)
        
        # If no session specified, find the right one
        if [[ -z "$CURRENT_SESSION" ]]; then
            # Try project-local cache first (instant lookup)
            CURRENT_SESSION=$(get_project_session)
            
            # If not found locally, fall back to AWK search
            if [[ -z "$CURRENT_SESSION" ]]; then
                # Find the most recent ACTIVE session for this agent, project, and branch
                # Collect all matching sessions and pick the one with the latest timestamp
                # Find all active sessions for this agent/project/branch
                CURRENT_SESSION=$(grep -A7 "^### Agent: $AGENT_ID" "$CURRENT_SESSIONS_FILE" | \
                awk -v project="$PROJECT_PATH" -v branch="$CURRENT_BRANCH" '
                BEGIN { RS="--"; FS="\n" }
                {
                    session=""; started=""; is_active=0; has_project=0; has_branch=0
                    for (i=1; i<=NF; i++) {
                        if ($i ~ /^- Session:/) {
                            session = $i
                            gsub(/^- Session: /, "", session)
                        }
                        else if ($i ~ /^- Project:/) {
                            proj = $i
                            gsub(/^- Project: /, "", proj)
                            if (proj == project) {
                                has_project = 1
                            }
                        }
                        else if ($i ~ /^- Branch:/) {
                            br = $i
                            gsub(/^- Branch: /, "", br)
                            if (br == branch) {
                                has_branch = 1
                            }
                        }
                        else if ($i ~ /^- Started:/) {
                            started = $i
                            gsub(/^- Started: /, "", started)
                        }
                        else if ($i ~ /^- Status: active/) {
                            is_active = 1
                        }
                    }
                    if (has_project && has_branch && is_active && session != "" && started != "") {
                        print started "|" session
                    }
                }' | sort -r | head -n1 | cut -d'|' -f2)
            fi
        fi
        
        if [[ -z "$CURRENT_SESSION" ]]; then
            echo "Error: No active session found for:"
            echo "  Agent: $AGENT_ID"
            echo "  Project: $PROJECT_PATH"
            echo "  Branch: $CURRENT_BRANCH"
            echo ""
            echo "Start a new session with: claude-sessions start <description>"
            echo "Or specify session: claude-sessions update <session.md> <message>"
            exit 1
        fi
        
        # Append to session file (now local)
        update_session_file "$CURRENT_SESSION" "$MESSAGE" true
        
        # Update global index timestamp
        update_global_index "$PROJECT_PATH" "$CURRENT_SESSION" "active"
        
        # Ensure local current session pointer exists
        local local_sessions_dir="$(get_local_sessions_dir)"
        if [[ ! -f "$local_sessions_dir/.current-session" ]]; then
            mkdir -p "$local_sessions_dir"
            echo "$CURRENT_SESSION" > "$local_sessions_dir/.current-session"
        fi
        
        # Note: We don't need to call update_current_session here since the session already exists
        # and we're just appending to the file, not changing its metadata
        
        echo -e "\n‚úÖ Updated Session"
        echo "   Session: $CURRENT_SESSION"
        
        # Show what was added
        echo -e "\n   Added Update:"
        echo "   $MESSAGE" | fold -w 60 | sed 's/^/   /'
        
        # Show confirmation of latest content
        local local_sessions_dir="$(get_local_sessions_dir)"
        echo -e "\n   Latest Updates:"
        tail -n 5 "$local_sessions_dir/$CURRENT_SESSION" | sed 's/^/   /'
        
        echo -e "\n‚úÖ Update Complete"
        ;;
        
    status)
        AGENT_ID=$(get_agent_id)
        PROJECT_PATH=$(pwd)
        CURRENT_BRANCH=$(get_git_branch)
        
        echo "Agent: $AGENT_ID"
        echo "Project: $PROJECT_PATH"
        echo "Branch: $CURRENT_BRANCH"
        
        # Check for local current session
        local local_sessions_dir="$(get_local_sessions_dir)"
        local current_file="$local_sessions_dir/.current-session"
        
        if [[ -f "$current_file" ]]; then
            local session_name=$(cat "$current_file")
            echo "Current Session: $session_name"
            
            # Show session summary if file exists
            if [[ -f "$local_sessions_dir/$session_name" ]]; then
                echo ""
                echo "Session Summary:"
                head -10 "$local_sessions_dir/$session_name" | grep -E "^##|^- " | sed 's/^/  /'
            fi
        else
            echo "No active session in this project"
            echo ""
            echo "Start a new session with: claude-sessions start <description>"
        fi
        ;;
        
    list)
        # Show local sessions first
        local local_sessions_dir="$(get_local_sessions_dir)"
        echo "üìÅ Local Sessions ($(basename $(pwd))):"
        echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        
        if [[ -d "$local_sessions_dir" ]]; then
            local current_session=$(cat "$local_sessions_dir/.current-session" 2>/dev/null)
            for session in "$local_sessions_dir"/*.md; do
                if [[ -f "$session" ]]; then
                    local name=$(basename "$session")
                    if [[ "$name" == "$current_session" ]]; then
                        echo "  ‚≠ê $name (current)"
                    else
                        echo "     $name"
                    fi
                fi
            done
        else
            echo "  No local sessions"
        fi
        
        echo ""
        echo "üåç Global Sessions (all projects):"
        echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        
        if [[ -f "$GLOBAL_INDEX_FILE" ]]; then
            tail -n +3 "$GLOBAL_INDEX_FILE" | while IFS='|' read -r project session agent branch status timestamp; do
                echo "  üìÇ $(basename "$project")"
                echo "     Session: $session"
                echo "     Branch: $branch | Status: $status"
                echo ""
            done
        else
            echo "  No global index found"
        fi
        ;;
        
    complete)
        AGENT_ID=$(get_agent_id)
        PROJECT_PATH=$(pwd)
        CURRENT_BRANCH=$(get_git_branch)
        
        # Get the active session for this agent, project, and branch
        CURRENT_SESSION=""
        CURRENT_TASKS=""
        
        # Read the file and find matching session
        while IFS= read -r line; do
            if [[ "$line" =~ ^###\ Agent:\ $AGENT_ID ]]; then
                # Found our agent, check next 8 lines (added branch)
                session_found=false
                branch_matches=false
                for i in {1..8}; do
                    IFS= read -r subline
                    if [[ "$subline" =~ ^-\ Session:\ (.+)$ ]]; then
                        temp_session="${BASH_REMATCH[1]}"
                    elif [[ "$subline" =~ ^-\ Project:\ $PROJECT_PATH ]]; then
                        session_found=true
                    elif [[ "$subline" =~ ^-\ Branch:\ $CURRENT_BRANCH ]]; then
                        branch_matches=true
                    elif [[ "$subline" =~ ^-\ Status:\ active ]] && [[ "$session_found" == "true" ]] && [[ "$branch_matches" == "true" ]]; then
                        CURRENT_SESSION="$temp_session"
                    elif [[ "$subline" =~ ^-\ Tasks:\ (.+)$ ]]; then
                        CURRENT_TASKS="${BASH_REMATCH[1]}"
                    fi
                done
                if [[ -n "$CURRENT_SESSION" ]]; then
                    break
                fi
            fi
        done < "$CURRENT_SESSIONS_FILE"
        
        if [[ -z "$CURRENT_SESSION" ]]; then
            echo "Error: No active session found for agent $AGENT_ID in project $PROJECT_PATH on branch $CURRENT_BRANCH"
            exit 1
        fi
        
        # Mark as completed
        update_current_session "$CURRENT_SESSION" "completed" "$CURRENT_TASKS - COMPLETED"
        
        # Add completion note to session file
        update_session_file "$CURRENT_SESSION" "## Session Completed
Completed at: $(date -u +%Y-%m-%dT%H:%M:%SZ)" true
        
        # Update global index
        update_global_index "$PROJECT_PATH" "$CURRENT_SESSION" "completed"
        
        # Remove project-local current session pointer
        local local_sessions_dir="$(get_local_sessions_dir)"
        rm -f "$local_sessions_dir/.current-session"
        
        echo "‚úÖ Completed session: $CURRENT_SESSION"
        ;;
        
    switch)
        SESSION_FILE="$1"
        if [[ -z "$SESSION_FILE" ]]; then
            echo "Error: Please provide a session file to switch to"
            exit 1
        fi
        
        local local_sessions_dir="$(get_local_sessions_dir)"
        if [[ ! -f "$local_sessions_dir/$SESSION_FILE" ]]; then
            echo "Error: Session file not found: $SESSION_FILE"
            echo "Looking in: $local_sessions_dir"
            exit 1
        fi
        
        AGENT_ID=$(get_agent_id)
        PROJECT_PATH=$(pwd)
        update_current_session "$SESSION_FILE" "active" "Resumed session"
        
        # Update global index
        update_global_index "$PROJECT_PATH" "$SESSION_FILE" "active"
        
        # Update project-local current session pointer
        local local_sessions_dir="$(get_local_sessions_dir)"
        mkdir -p "$local_sessions_dir"
        echo "$SESSION_FILE" > "$local_sessions_dir/.current-session"
        
        echo -e "\nüîÑ Switching Session"        
        echo "   From: $CURRENT_SESSION"
        echo "   To:   $SESSION_FILE"
        
        # Show session details
        echo -e "\nüìÑ Session Details:"
        grep -E "^\*\*(Project|Branch)\*\*:" "$local_sessions_dir/$SESSION_FILE" | sed 's/^\*\*/   /; s/\*\*:/:/' 
        
        echo -e "\n‚úÖ Switch Complete"
        ;;
        
    *)
        print_usage
        exit 1
        ;;
esac